{"version":3,"sources":["Client/ClientCrud.js","Client/UserRest.js","Component/Navigation/Logo.js","Component/Navigation/Navlist.js","Component/Navigation/Navmenu.js","Component/Navigation/ProfileInfo.js","Component/Navigation/TopNav.js","Component/Navigation/Sidebar.js","Client/AuthUtil.js","Login.js","Component/Navigation/ProjectList.js","Component/Navigation/MainNav.js","App.js","serviceWorker.js","index.js"],"names":["ClientCrud","objects","name","fetch","this","Resthost","method","headers","body","JSON","stringify","then","req","json","UserRest","projectid","res","Logo","className","Component","Navlist","to","props","nav","link","onClick","toggleSidebar","icon","aria-hidden","Navmenu","state","navlist","prevProps","prevState","snapshot","setState","map","index","key","ProfileInfo","src","alt","TopNav","Sidebar","kanban","id","scrum","wrapper","current","classList","toggle","getnavlist","project","projectType","React","createRef","ref","AuthUtil","username","password","config","url","axios","data","Login","email","formchanges","event","target","value","savechanges","getToken","updateauth","htmlFor","type","onChange","placeholder","ProjectList","updateproject","update","toggleprojects","MainNav","projects","changeproject","href","App","auth","getProjects","loginauthentication","projectloader","Board","lazy","Setting","Dashboard","GanntChart","Fragment","fallback","size","color","path","exact","component","BackLogs","checkToken","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yHAAMA,E,oGAGYC,EAASC,GACnB,OAAOC,MAAMC,KAAKC,SAAW,IAAMH,EAAO,UAAW,CACjDI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUT,KACtBU,MAAK,SAACC,GAAD,OAASA,EAAIC,Y,6BAGXZ,EAASC,GACnB,OAAOC,MAAMC,KAAKC,SAAW,IAAMH,EAAO,UAAW,CACjDI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUT,O,2BAIjBA,EAASC,GACjBC,MAAMC,KAAKC,SAAW,IAAMH,EAAO,QAAS,CACxCI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUT,S,KA7B3BD,EACKK,SAAmB,oCAiCfL,O,0DChCTc,E,sGACcC,GACZ,OAAOZ,MAAMH,IAAWK,SAAW,UAAYU,GAAWJ,MAAK,SAACK,GAAD,OAASA,EAAIH,Y,kCAG7DE,GACf,OAAOZ,MAAMH,IAAWK,SAAW,aAAeU,GAAWJ,MAAK,SAACK,GAAD,OAASA,EAAIH,Y,oCAI/E,OAAOV,MAAMH,IAAWK,SAAW,gBAAgBM,MAAK,SAACK,GAAD,OAASA,EAAIH,c,KAI9DC,O,6MCFAG,E,uKAVP,OACI,yBAAKC,UAAU,sCACX,wBAAIA,UAAU,uCAAd,c,GAJGC,aCkBJC,E,uKAbP,OACI,kBAAC,IAAD,CAAMC,GAAIjB,KAAKkB,MAAMC,IAAIC,MACrB,yBAAKN,UAAU,kBACX,yBAAKA,UAAU,qBAAqBO,QAASrB,KAAKkB,MAAMI,eACpD,yBAAKR,UAAU,mBAAkB,uBAAGA,UAAWd,KAAKkB,MAAMC,IAAII,KAAO,QACjCC,cAAY,SAASxB,KAAKkB,MAAMC,IAAIrB,a,GAT1EiB,aC6BPU,E,kDA5BX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CAACC,QAAS,EAAKT,MAAMS,SAFnB,E,+DAKAC,EAAwBC,EAAwBC,GAC3DF,EAAUD,UAAY3B,KAAKkB,MAAMS,SACjC3B,KAAK+B,SAAS,CAACJ,QAAS3B,KAAKkB,MAAMS,Y,+BAKjC,IAAD,OACL,OACI,6BACK3B,KAAK0B,MAAMC,QAAQK,KAAI,SAACb,EAAKc,GAC1B,OACI,kBAAC,EAAD,CAASd,IAAKA,EACLG,cAAe,EAAKJ,MAAMI,cAC1BY,IAAKD,Y,GApBhBlB,aCcPoB,E,uKAbP,OACI,yBAAKrB,UAAU,qBACX,yBAAKA,UAAU,uEACX,yBAAKA,UAAU,wCAAwCsB,IAAI,eAAeC,IAAI,KAC9E,yBAAKvB,UAAU,aACX,uBAAGA,UAAU,gBAAb,2B,GAPEC,aCoBXuB,E,uKAlBP,OACI,yBAAKxB,UAAU,8EACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,4BACX,wBAAIA,UAAU,sEAAd,SAGA,0BAAMA,UAAU,uDACVO,QAASrB,KAAKkB,MAAMI,eAClB,uBAAGR,UAAU,aAAaU,cAAY,iB,GAXjDT,aC6GNwB,E,kDAlDX,WAAYrB,GAAQ,IAAD,8BACf,cAAMA,IAvDVsB,OAAS,CACL,CACIC,GAAI,EACJ3C,KAAM,OACNsB,KAAM,YACNG,KAAM,eAEV,CACIkB,GAAI,EACJ3C,KAAM,eACNsB,KAAM,iBACNG,KAAM,yBAEV,CACIkB,GAAI,EACJ3C,KAAM,UACNsB,KAAM,iBACNG,KAAM,oBAEV,CACIkB,GAAI,EACJrB,KAAM,mBACNtB,KAAM,UACNyB,KAAM,eA+BK,EA5BnBmB,MAAQ,CACJ,CACID,GAAI,EACJ3C,KAAM,OACNsB,KAAM,YACNG,KAAM,eAEV,CACIkB,GAAI,EACJrB,KAAM,oBACNtB,KAAM,WACNyB,KAAM,kBAEV,CACIkB,GAAI,EACJrB,KAAM,iBACNtB,KAAM,QACNyB,KAAM,yBAEV,CACIkB,GAAI,EACJrB,KAAM,mBACNtB,KAAM,UACNyB,KAAM,eAKK,EAMnBD,cAAgB,WACC,EAAKqB,QAAQC,QACrBC,UAAUC,OAAO,gBARP,EAiBnBC,WAAa,SAACC,GACV,GAAgB,OAAZA,EAUA,MAAO,GATP,OAAQA,EAAQC,aACZ,IAAK,SACD,OAAO,EAAKT,OAChB,IAAK,QACD,OAAO,EAAKE,MAChB,QACI,OAAO,OAvBnB,EAAKC,QAAUO,IAAMC,YACrB,EAAKzB,MAAQ,CAACC,QAAS,EAAKoB,WAAW,EAAK7B,MAAM8B,UAHnC,E,+DAWApB,EAAwBC,EAAwBC,GAC3DF,EAAUoB,UAAYhD,KAAKkB,MAAM8B,SACjChD,KAAK+B,SAAS,CAACJ,QAAS3B,KAAK+C,WAAW/C,KAAKkB,MAAM8B,a,+BAoBvD,OACI,6BACI,kBAAC,EAAD,CAAQ1B,cAAetB,KAAKsB,gBAC5B,yBAAK8B,IAAKpD,KAAK2C,QAAS7B,UAAU,uCAC9B,yBAAKA,UAAU,kEACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,0BACX,kBAAC,EAAD,CAASQ,cAAetB,KAAKsB,cAAeK,QAAS3B,KAAK0B,MAAMC,WAEpE,kBAAC,EAAD,a,GAjGFZ,a,yBCkBPsC,E,sGArBKC,EAAUC,GACtB,IAAMC,EAAS,CACXtD,OAAQ,OACRuD,IACI,wCACAH,EACA,aACAC,GAER,OAAOG,IAAMF,GAAQjD,MAAK,SAACC,GAAD,OAASA,EAAImD,U,mCAQvC,OAAOD,IAJQ,CACXxD,OAAQ,MACRuD,IAAK,sCAEYlD,MAAK,SAACC,GAAD,OAASA,EAAImD,Y,KCqEhCC,E,4MArFXlC,MAAQ,CACJmC,MAAO,GACPN,SAAU,I,EAEdO,YAAc,SAACC,GACX,OAAQA,EAAMC,OAAOvB,IACjB,IAAK,QACD,EAAKV,SAAS,CAAC8B,MAAOE,EAAMC,OAAOC,QACnC,MACJ,IAAK,WACD,EAAKlC,SAAS,CAACwB,SAAUQ,EAAMC,OAAOC,U,EAMlDC,YAAc,WACVb,EAASc,SAAS,EAAKzC,MAAMmC,MAAO,EAAKnC,MAAM6B,UAC1ChD,MAAK,SAAAoD,GAAI,OAAI,EAAKzC,MAAMkD,WAAWT,O,uDAIxC,OACI,yBAAK7C,UAAU,gDACX,yBAAKA,UAAU,+BACX,yBACIA,UAAU,uEAEV,yBAAKA,UAAU,6CAAf,SAGA,yBAAKA,UAAU,QACX,2BACIA,UAAU,gDACVuD,QAAQ,YAFZ,YAMA,2BACIvD,UAAU,6FACV2B,GAAG,QACH6B,KAAK,OACLL,MAAOjE,KAAK0B,MAAMmC,MAClBU,SAAUvE,KAAK8D,YACfU,YAAY,cAGpB,yBAAK1D,UAAU,QACX,2BACIA,UAAU,gDACVuD,QAAQ,YAFZ,YAMA,2BACIvD,UAAU,6GACV2B,GAAG,WACH6B,KAAK,WACLL,MAAOjE,KAAK0B,MAAM6B,SAClBgB,SAAUvE,KAAK8D,YACfU,YAAY,uBAEhB,uBAAG1D,UAAU,2BAAb,8BAEJ,yBAAKA,UAAU,qCACX,4BACIA,UAAU,0FACVwD,KAAK,SACLjD,QAASrB,KAAKkE,aAHlB,WAOA,yBACIpD,UAAU,kFADd,4B,GAzERC,aCgBL0D,E,4MAhBXC,cAAgB,WACZ,EAAKxD,MAAMyD,OAAO,EAAKzD,MAAM8B,SAC7B,EAAK9B,MAAM0D,kB,uDAIX,OACI,yBACIvD,QAASrB,KAAK0E,cACd5D,UAAU,yEACV,uBAAGA,UAAU,QAAQd,KAAKkB,MAAM8B,QAAQlD,W,GAX9BiB,aCwDX8D,E,kDArDX,WAAY3D,GAAQ,IAAD,8BACf,cAAMA,IAIV0D,eAAiB,WACA,EAAKE,SAASlC,QACtBC,UAAUC,OAAO,WALtB,EAAKgC,SAAW5B,IAAMC,YAFP,E,qDAUT,IAAD,OACL,OACI,yBAAKrC,UAAU,oFACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,+CACX,yBAAKA,UAAU,mBACX,4BACIA,UAAU,oGACV,uBAAGA,UAAU,2BAAb,cAEJ,4BACIA,UAAU,2FAEV,yBAAKA,UAAU,OAAOO,QAASrB,KAAK4E,gBAChC,uBAAG9D,UAAU,mCAAb,YACA,uBAAGA,UAAU,gCAAgCU,cAAY,UAG7D,yBAAK4B,IAAKpD,KAAK8E,SACVhE,UAAU,+FACVd,KAAKkB,MAAM4D,SAAS9C,KAAI,SAACgB,EAASf,GAAV,OAAoB,kBAAC,IAAD,CAAMC,IAAKD,EACLhB,GAAI,aAAa,kBAAC,EAAD,CAChE2D,eAAgB,EAAKA,eAAgB5B,QAASA,EAC9C2B,OAAQ,EAAKzD,MAAM6D,sBAG/B,4BACIjE,UAAU,iHACV,uBAAGA,UAAU,aAAb,oBAGR,uBAAGkE,KAAK,WACJ,0BAAMlE,UAAU,6BACZ,uBAAGA,UAAU,2BAA2BU,cAAY,kB,GA5C9DT,a,gBCwGPkE,E,4MAhGXvD,MAAQ,CACJwD,MAAM,EACNJ,SAAU,GACV9B,QAAS,M,EA0Bb+B,cAAgB,SAACpB,GACb,EAAK5B,SAAS,CAACiB,QAASW,K,EAE5BS,WAAa,SAACT,GACV,EAAK5B,SAAS,CAACmD,KAAMvB,IACjBA,GACAjD,IAASyE,cAAc5E,MAAK,SAAAoD,GAAI,OAAI,EAAK5B,SAAS,CAAC+C,SAAUnB,EAAMX,QAASW,EAAK,S,EAGzFyB,oBAAsB,WAClB,OAAI,EAAK1D,MAAMwD,KACH,yBAAKpE,UAAU,iCACnB,kBAAC,IAAD,KACI,kBAAC,EAAD,CAASgE,SAAU,EAAKpD,MAAMoD,SAAUC,cAAe,EAAKA,gBAC5D,kBAAC,EAAD,CAAS/B,QAAS,EAAKtB,MAAMsB,UAC5B,EAAKqC,kBAIP,kBAAC,EAAD,CAAOjB,WAAY,EAAKA,c,EAIvCiB,cAAgB,WACZ,GAA2B,OAAvB,EAAK3D,MAAMsB,QAAkB,CAC7B,GAAuC,WAAnC,EAAKtB,MAAMsB,QAAQC,YAA0B,CAC7C,IAAMqC,EAAQpC,IAAMqC,MAAK,kBAAM,uDACzBC,EAAUtC,IAAMqC,MAAK,kBAAM,uDAC3BE,EAAYvC,IAAMqC,MAAK,kBAAM,uDAC7BG,EAAaxC,IAAMqC,MAAK,kBAAM,uDACpC,OACI,kBAAC,IAAMI,SAAP,KACI,kBAAC,WAAD,CAAUC,SAAU,yBAAK9E,UAAU,uDAC/B,kBAAC,IAAD,CAAS+E,KAAK,KAAKC,MAAO,cAE1B,kBAAC,IAAD,CAAOC,KAAK,YAAYC,OAAK,EAACC,UAAW,kBAAM,kBAACR,EAAD,CAAWzC,QAAS,EAAKtB,MAAMsB,aAC9E,kBAAC,IAAD,CAAO+C,KAAK,iBAAiBE,UAAW,kBAAM,kBAACX,EAAD,CAAOtC,QAAS,EAAKtB,MAAMsB,aACzE,kBAAC,IAAD,CAAO+C,KAAK,iBAAiBE,UAAW,kBAAM,kBAACP,EAAD,CAAY1C,QAAS,EAAKtB,MAAMsB,aAC9E,kBAAC,IAAD,CAAO+C,KAAK,mBAAmBE,UAAW,kBAAM,kBAACT,EAAD,WAKhE,GAAuC,UAAnC,EAAK9D,MAAMsB,QAAQC,YAAyB,CAC5C,IAAMwC,EAAYvC,IAAMqC,MAAK,kBAAM,uDAC7BW,EAAWhD,IAAMqC,MAAK,kBAAM,kCAClC,OACI,yBAAKzE,UAAU,mCACX,kBAAC,WAAD,CAAU8E,SAAU,yBAAK9E,UAAU,uDAC/B,kBAAC,IAAD,CAAS+E,KAAK,KAAKC,MAAO,cAE1B,kBAAC,IAAD,CAAOC,KAAK,YAAYC,OAAK,EAACC,UAAW,kBAAM,kBAAC,EAAD,CAAWjD,QAAS,EAAKtB,MAAMsB,aAC9E,kBAAC,IAAD,CAAO+C,KAAK,oBAAoBE,UAAW,kBAAM,kBAACC,EAAD,CAAUlD,QAAS,EAAKtB,MAAMsB,kB,kEA3ElF,IAAD,OAChBK,EAAS8C,aAAa5F,MAAK,SAAAoD,GACvB,EAAK5B,SAAS,CAACmD,KAAMvB,IACjBA,GACAjD,IAASyE,cAAc5E,MAAK,SAAAoD,GAAI,OAAI,EAAK5B,SAAS,CAAC+C,SAAUnB,EAAMX,QAASW,EAAK,a,+BAgFzF,OACI3D,KAAKoF,0B,GA5FCrE,aCCEqF,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2D,MCVRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBzG,MAAK,SAAA0G,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dac2bb90.chunk.js","sourcesContent":["class ClientCrud {\r\n    static Resthost: string = \"http://localhost:8080/api/project\";\r\n\r\n    static update(objects, name) {\r\n        return fetch(this.Resthost + \"/\" + name + \"/update\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(objects),\r\n        }).then((req) => req.json());\r\n    }\r\n\r\n    static delete(objects, name) {\r\n        return fetch(this.Resthost + \"/\" + name + \"/delete\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(objects),\r\n        });\r\n    }\r\n\r\n    static drag(objects, name) {\r\n        fetch(this.Resthost + \"/\" + name + \"/drag\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(objects),\r\n        });\r\n    }\r\n}\r\n\r\nexport default ClientCrud;\r\n","import ClientCrud from \"./ClientCrud\";\r\n\r\nclass UserRest {\r\n    static getBoard(projectid) {\r\n        return fetch(ClientCrud.Resthost + \"/board/\" + projectid).then((res) => res.json());\r\n    }\r\n\r\n    static getTimeline(projectid) {\r\n        return fetch(ClientCrud.Resthost + \"/timeline/\" + projectid).then((res) => res.json());\r\n    }\r\n\r\n    static getProjects() {\r\n        return fetch(ClientCrud.Resthost + \"/getprojects\").then((res) => res.json());\r\n    }\r\n}\r\n\r\nexport default UserRest;\r\n","import React, {Component} from 'react';\r\n\r\nclass Logo extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"h-20 font-serif lg:block font-bold\">\r\n                <h1 className=\"text-center text-3xl p-5 text-white\">\r\n                    BOARD\r\n                </h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logo;\r\n","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Navlist extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Link to={this.props.nav.link}>\r\n                <div className=\"text-gray-200 \">\r\n                    <div className=\"p-3 h-12 navs z-20\" onClick={this.props.toggleSidebar}>\r\n                        <div className=\"float-left pl-3\"><i className={this.props.nav.icon + \" px-2\"}\r\n                                                            aria-hidden=\"true\"/>{this.props.nav.name}</div>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navlist;\r\n","import React, {Component} from 'react';\r\nimport Navlist from \"./Navlist\";\r\n\r\nclass Navmenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {navlist: this.props.navlist}\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot: SS) {\r\n        if (prevProps.navlist !== this.props.navlist) {\r\n            this.setState({navlist: this.props.navlist});\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.navlist.map((nav, index) => {\r\n                    return (\r\n                        <Navlist nav={nav}\r\n                                 toggleSidebar={this.props.toggleSidebar}\r\n                                 key={index}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navmenu;\r\n","import React, {Component} from 'react';\r\n\r\nclass ProfileInfo extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"absolute bottom-0\">\r\n                <div className=\"flex items-center p-5 text-gray-300 font-normal hover:text-gray-100\">\r\n                    <img className=\"w-10 h-10 rounded-full mr-4 shadow-xs\" src=\"/tushar.webp\" alt=\"\"/>\r\n                    <div className=\"text-base\">\r\n                        <p className=\"leading-none\">Tushar Chaudhari</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React, {Component} from 'react';\r\n\r\nclass TopNav extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"bgsidebar h-20 border-b border-gray-400 shadow fixed w-full lg:hidden z-20\">\r\n                <div className=\"flex-row\">\r\n                    <div className=\"font-semibold font-serif\">\r\n                        <h1 className=\"text-center text-gray-200 text-3xl p-5 hover:text-white float-left\">\r\n                            BOARD\r\n                        </h1>\r\n                        <span className=\"text-gray-200 text-3xl p-5 float-right burger-toggle\"\r\n                              onClick={this.props.toggleSidebar}>\r\n                                <i className=\"fa fa-bars\" aria-hidden=\"true\"/>\r\n                            </span>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopNav;\r\n","import React, {Component} from 'react';\r\nimport Logo from \"./Logo\";\r\nimport Navmenu from \"./Navmenu\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport TopNav from \"./TopNav\";\r\n\r\nclass Sidebar extends Component {\r\n    kanban = [\r\n        {\r\n            id: 0,\r\n            name: \"Home\",\r\n            link: \"/project/\",\r\n            icon: \"fas fa-home\"\r\n        },\r\n        {\r\n            id: 1,\r\n            name: \"Kanban Board\",\r\n            link: \"/project/board\",\r\n            icon: \"far fa-calendar-check\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Roadmap\",\r\n            link: \"/project/gannt\",\r\n            icon: \"fas fa-chart-bar\"\r\n        },\r\n        {\r\n            id: 3,\r\n            link: \"/project/setting\",\r\n            name: \"Setting\",\r\n            icon: \"fas fa-cog\"\r\n        },\r\n    ]\r\n    scrum = [\r\n        {\r\n            id: 0,\r\n            name: \"Home\",\r\n            link: \"/project/\",\r\n            icon: \"fas fa-home\"\r\n        },\r\n        {\r\n            id: 1,\r\n            link: \"/project/backlogs\",\r\n            name: \"Backlogs\",\r\n            icon: \"fas fa-history\"\r\n        },\r\n        {\r\n            id: 2,\r\n            link: \"/project/board\",\r\n            name: \"Board\",\r\n            icon: \"far fa-calendar-check\"\r\n        },\r\n        {\r\n            id: 3,\r\n            link: \"/project/setting\",\r\n            name: \"Setting\",\r\n            icon: \"fas fa-cog\"\r\n        },\r\n\r\n    ]\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.wrapper = React.createRef();\r\n        this.state = {navlist: this.getnavlist(this.props.project)};\r\n    }\r\n\r\n    toggleSidebar = () => {\r\n        const wrap = this.wrapper.current;\r\n        wrap.classList.toggle('hidesidebar');\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot: SS) {\r\n        if (prevProps.project !== this.props.project) {\r\n            this.setState({navlist: this.getnavlist(this.props.project)})\r\n        }\r\n    }\r\n\r\n    getnavlist = (project) => {\r\n        if (project !== null) {\r\n            switch (project.projectType) {\r\n                case \"kanban\":\r\n                    return this.kanban\r\n                case \"scrum\":\r\n                    return this.scrum\r\n                default:\r\n                    return null\r\n            }\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TopNav toggleSidebar={this.toggleSidebar}/>\r\n                <div ref={this.wrapper} className=\"lg:block sidebar hidesidebar h-full\">\r\n                    <div className=\"h-full lg:w-56 font-sans font-medium fixed z-10 w-full navlist\">\r\n                        <Logo/>\r\n                        <div className=\"h-auto mt-10 text-base\">\r\n                            <Navmenu toggleSidebar={this.toggleSidebar} navlist={this.state.navlist}/>\r\n                        </div>\r\n                        <ProfileInfo/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sidebar;\r\n","import axios from \"axios\";\r\n\r\nclass AuthUtil {\r\n    static getToken(username, password) {\r\n        const config = {\r\n            method: \"post\",\r\n            url:\r\n                \"http://localhost:8080/login?username=\" +\r\n                username +\r\n                \"&password=\" +\r\n                password,\r\n        };\r\n        return axios(config).then((req) => req.data);\r\n    }\r\n\r\n    static checkToken() {\r\n        const config = {\r\n            method: \"get\",\r\n            url: \"http://localhost:8080/login/check\",\r\n        };\r\n        return axios(config).then((req) => req.data);\r\n    }\r\n}\r\n\r\nexport default AuthUtil;\r\n","import React, {Component} from 'react';\r\nimport AuthUtil from \"./Client/AuthUtil\";\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        email: \"\",\r\n        password: \"\"\r\n    }\r\n    formchanges = (event) => {\r\n        switch (event.target.id) {\r\n            case \"email\":\r\n                this.setState({email: event.target.value});\r\n                break;\r\n            case \"password\":\r\n                this.setState({password: event.target.value});\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n    savechanges = () => {\r\n        AuthUtil.getToken(this.state.email, this.state.password)\r\n            .then(data => this.props.updateauth(data));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"min-h-screen flex justify-center bg-gray-200\">\r\n                <div className=\"self-center md:w-1/2 w-full\">\r\n                    <div\r\n                        className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 flex flex-col flex-1\"\r\n                    >\r\n                        <div className=\"text-2xl text-blue-900 mb-4 font-semibold\">\r\n                            Login\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                            <label\r\n                                className=\"block text-grey-darker text-sm font-bold mb-2\"\r\n                                htmlFor=\"username\"\r\n                            >\r\n                                Username\r\n                            </label>\r\n                            <input\r\n                                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker focus:outline-none\"\r\n                                id=\"email\"\r\n                                type=\"text\"\r\n                                value={this.state.email}\r\n                                onChange={this.formchanges}\r\n                                placeholder=\"Username\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-6\">\r\n                            <label\r\n                                className=\"block text-grey-darker text-sm font-bold mb-2\"\r\n                                htmlFor=\"password\"\r\n                            >\r\n                                Password\r\n                            </label>\r\n                            <input\r\n                                className=\"shadow appearance-none border border-red rounded w-full py-2 px-3 text-grey-darker mb-3 focus:outline-none\"\r\n                                id=\"password\"\r\n                                type=\"password\"\r\n                                value={this.state.password}\r\n                                onChange={this.formchanges}\r\n                                placeholder=\"******************\"\r\n                            />\r\n                            <p className=\"text-red text-xs italic\">Please choose a password.</p>\r\n                        </div>\r\n                        <div className=\"flex items-center justify-between\">\r\n                            <button\r\n                                className=\"bg-blue-500 hover:bg-blue-800 text-white font-bold py-2 px-4 rounded focus:outline-none\"\r\n                                type=\"button\"\r\n                                onClick={this.savechanges}\r\n                            >\r\n                                Sign In\r\n                            </button>\r\n                            <div\r\n                                className=\"inline-block align-baseline font-bold text-sm text-blue hover:text-blue-darker\"\r\n                            >\r\n                                Forgot Password?\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\n\r\nclass ProjectList extends Component {\r\n    updateproject = () => {\r\n        this.props.update(this.props.project);\r\n        this.props.toggleprojects();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                onClick={this.updateproject}\r\n                className=\"block hoverbg text-xl rounded border-b border-gray-500 cursor-pointer\">\r\n                <p className=\"py-1\">{this.props.project.name}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProjectList;\r\n","import React, {Component} from 'react';\r\nimport ProjectList from \"./ProjectList\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass MainNav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.projects = React.createRef()\r\n    }\r\n\r\n    toggleprojects = () => {\r\n        const wrap = this.projects.current;\r\n        wrap.classList.toggle('hidden');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"bg-white h-20 border-b border-gray-500 fixed min-h-0 w-full lg:block hidden z-10\">\r\n                <div className=\"flex-row\">\r\n                    <div className=\"font-semibold font-sans text-gray-700 ml-56\">\r\n                        <div className=\"flex float-left\">\r\n                            <button\r\n                                className=\"flex my-5 ml-10 hoverbg text-xl rounded border border-gray-500 cursor-pointer focus:outline-none\">\r\n                                <p className=\"py-1 px-5 font-semibold\">Your Work</p>\r\n                            </button>\r\n                            <button\r\n                                className=\"my-5 ml-8 hoverbg rounded border border-gray-500 cursor-pointer w-40 focus:outline-none\"\r\n                            >\r\n                                <div className=\"flex\" onClick={this.toggleprojects}>\r\n                                    <p className=\"py-1 px-5 text-xl font-semibold\">Projects</p>\r\n                                    <i className=\"fas fa-chevron-down py-3 px-5\" aria-hidden=\"true\"\r\n                                    />\r\n                                </div>\r\n                                <div ref={this.projects}\r\n                                     className=\"bg-white absolute mt-1 border-gray-500 border-l border-r border-t w-40 hidden font-semibold\">\r\n                                    {this.props.projects.map((project, index) => <Link key={index}\r\n                                                                                       to={\"/project/\"}><ProjectList\r\n                                        toggleprojects={this.toggleprojects} project={project}\r\n                                        update={this.props.changeproject}/></Link>)}\r\n                                </div>\r\n                            </button>\r\n                            <button\r\n                                className=\"flex my-5 ml-8 hoverbg text-xl rounded border border-gray-500 cursor-pointer font-semibold focus:outline-none\">\r\n                                <p className=\"py-1 px-5\">Create Project</p>\r\n                            </button>\r\n                        </div>\r\n                        <a href=\"/tushar\">\r\n                            <span className=\"text-3xl p-5 float-right \">\r\n                                <i className=\"fas fa-th cursor-pointer\" aria-hidden=\"true\"/>\r\n                            </span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainNav;\r\n","import React, {Component, Suspense} from 'react';\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport Sidebar from \"./Component/Navigation/Sidebar\";\r\nimport './App.css'\r\nimport Login from \"./Login\";\r\nimport MainNav from \"./Component/Navigation/MainNav\";\r\nimport UserRest from \"./Client/UserRest\";\r\n\r\nimport {Spinner} from \"@zendeskgarden/react-loaders\";\r\nimport AuthUtil from \"./Client/AuthUtil\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        auth: false,\r\n        projects: [],\r\n        project: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        AuthUtil.checkToken().then(data => {\r\n            this.setState({auth: data})\r\n            if (data) {\r\n                UserRest.getProjects().then(data => this.setState({projects: data, project: data[0]}));\r\n            }\r\n        });\r\n        // this.setState({auth: true});\r\n        // let data = [{\r\n        //     \"id\": \"60ec0531b17d841f6852c76b\",\r\n        //     \"projectType\": \"kanban\",\r\n        //     \"name\": \"Project 1\",\r\n        //     \"userIdList\": [\"60ec0531b17d841f6852c76a\"]\r\n        // }, {\r\n        //     \"id\": \"60ec0531b17d841f6852c76c\",\r\n        //     \"projectType\": \"scrum\",\r\n        //     \"name\": \"Project 2\",\r\n        //     \"userIdList\": [\"60ec0531b17d841f6852c76a\"]\r\n        // }];\r\n        // this.setState({projects: data, project: data[0]})\r\n\r\n    }\r\n\r\n    changeproject = (data) => {\r\n        this.setState({project: data});\r\n    }\r\n    updateauth = (data) => {\r\n        this.setState({auth: data});\r\n        if (data) {\r\n            UserRest.getProjects().then(data => this.setState({projects: data, project: data[0]}));\r\n        }\r\n    }\r\n    loginauthentication = () => {\r\n        if (this.state.auth) {\r\n            return (<div className=\"flex min-h-screen bg-gray-100\">\r\n                <Router>\r\n                    <MainNav projects={this.state.projects} changeproject={this.changeproject}/>\r\n                    <Sidebar project={this.state.project}/>\r\n                    {this.projectloader()}\r\n                </Router>\r\n            </div>)\r\n        } else {\r\n            return <Login updateauth={this.updateauth}/>\r\n        }\r\n    }\r\n\r\n    projectloader = () => {\r\n        if (this.state.project !== null) {\r\n            if (this.state.project.projectType === \"kanban\") {\r\n                const Board = React.lazy(() => import('./Component/Board/Board'));\r\n                const Setting = React.lazy(() => import('./Component/Setting/Setting'));\r\n                const Dashboard = React.lazy(() => import(\"./Component/Dashboard/Dashboard\"));\r\n                const GanntChart = React.lazy(() => import(\"./Component/GanntChart/GanntChart\"));\r\n                return (\r\n                    <React.Fragment>\r\n                        <Suspense fallback={<div className=\"lg:ml-56 flex flex-wrap justify-center mt-32 w-full\">\r\n                            <Spinner size=\"64\" color={\"#155e82\"}/>\r\n                        </div>}>\r\n                            <Route path=\"/project/\" exact component={() => <Dashboard project={this.state.project}/>}/>\r\n                            <Route path=\"/project/board\" component={() => <Board project={this.state.project}/>}/>\r\n                            <Route path=\"/project/gannt\" component={() => <GanntChart project={this.state.project}/>}/>\r\n                            <Route path=\"/project/setting\" component={() => <Setting/>}/>\r\n                        </Suspense>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            if (this.state.project.projectType === \"scrum\") {\r\n                const Dashboard = React.lazy(() => import(\"./Component/Dashboard/Dashboard\"));\r\n                const BackLogs = React.lazy(() => import(\"./Component/backlogs/BackLogs\"));\r\n                return (\r\n                    <div className=\"w-full lg:ml-56 bg-white mt-20 \">\r\n                        <Suspense fallback={<div className=\"lg:ml-56 flex flex-wrap justify-center mt-32 w-full\">\r\n                            <Spinner size=\"64\" color={\"#155e82\"}/>\r\n                        </div>}>\r\n                            <Route path=\"/project/\" exact component={() => <Dashboard project={this.state.project}/>}/>\r\n                            <Route path=\"/project/backlogs\" component={() => <BackLogs project={this.state.project}/>}/>\r\n                        </Suspense>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.loginauthentication()\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'},\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\"\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}